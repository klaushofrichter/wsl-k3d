#################################################################################
# MANDATORY SETTINGS for some componentes. You need to customize these settings #
#################################################################################
#                                                                               #
# In some cases you see two options for the same variable, one of them in       #
# comments. You can always define the value directly in this file, but in some  #
# cases it is better to use an external file, best outside of the scope of a    #
# source control system such as git, so that you don't accidentally put secrets #
# into public places.                                                           #
#                                                                               #
#################################################################################

#
# FEATURE FLAGS: 
# You can enable services that need configuration, Grafana-Cloud and Slack. 
# If these settings are "no", you don't need to do any further configuration. 
#
export GRAFANA_CLOUD_ENABLE="no"
#export GRAFANA_CLOUD_ENABLE="yes"
export SLACK_ENABLE="no"
#export SLACK_ENABLE="yes"


#
# SLACK
#
# SLACKWEBHOOK this is a URL like this: https://hooks.slack.com/services/DFE$$RFSFSZ/FSFRGRGRRQ/afsdfsjisjfijgsjdsfjfooj
# create one via https://api.slack.com/apps  (create new app and generate a webhook URL)
export SLACKWEBHOOK="YOUR-WEBHOOK-URL-HERE"
#export SLACKWEBHOOK=$(cat ../.slack/SLACKWEBHOOK.url)

#
# Grafana Cloud settings. You need to pickup six details from your Grafana Cloud Portal: a numeric username 
#                         for Loki, a URL for Loki, a numeric user name for Prometheus, a organization 
#                         name and a API Key for "metric publisher" or better. Enter those either in this 
#                         config.sh file or (better?) store them externally and read dynamically. 
# 
export GRAFANA_CLOUD_ORG="YOURORGNAME"  # this is the grafana cloud organization that you created
export GRAFANA_CLOUD_METRICS_PUBLISHER_PASS="YOUR METRICS PUBLISHER API KEY", generated by Grafana
export LOKI_METRICS_PUBLISHER_USER="YOUR_LOKI_USER"  # a number like 123456, determined by Grafana
export PROM_METRICS_PUBLISHER_USER="YOUR_PROM_USER"  # a number like 654321, determined by Grafana
export LOKI_METRICS_PUBLISHER_URL="https://logs-prod-us-central1.grafana.net"
export PROM_METRICS_PUBLISHER_URL="https://prometheus-prod-10-prod-us-central-0.grafana.net/api/prom/push"

#export GRAFANA_CLOUD_ORG=$(cat ../.grafana/GRAFANA_CLOUD_ORG.txt)
#export GRAFANA_CLOUD_METRICS_PUBLISHER_PASS=$(cat ../.grafana/GRAFANA_CLOUD_METRICS_PUBLISHER_PASS.txt)
#export LOKI_METRICS_PUBLISHER_USER=$(cat ../.grafana/LOKI_METRICS_PUBLISHER_USER.txt)
#export PROM_METRICS_PUBLISHER_USER=$(cat ../.grafana/PROM_METRICS_PUBLISHER_USER.txt)
#export LOKI_METRICS_PUBLISHER_URL=$(cat ../.grafana/LOKI_METRICS_PUBLISHER_URL.txt)
#export PROM_METRICS_PUBLISHER_URL=$(cat ../.grafana/PROM_METRICS_PUBLISHER_URL.txt)


###################################################
# SETTINGS which you usually don't need to change #
###################################################

# K3D Config
export CLUSTER="mycluster"  # Cluster name
export HTTPPORT=8080        # Port for HTTP access to Grafana/Prometheus/Alertmanager in this cluster

# Grafana Local instance password for admin account
# you can pick a password here, or have it in the file ../.grafana/GRAFANA_LOCAL_ADMIN_PASS.txt
export GRAFANA_LOCAL_ADMIN_PASS="operator" 
#export GRAFANA_LOCAL_ADMIN_PASS=$(cat ../.grafana/GRAFANA_LOCAL_ADMIN_PASS.txt)

# InfluxDB local instance password for admin account
# you can pick a InfluxDB password here, or have it in ../.influx/INFLUXDB_LOCAL_ADMIN_PASSWORD.txt
export INFLUXDB_LOCAL_ADMIN_PASSWORD="password" 
#export INFLUXDB_LOCAL_ADMIN_PASSWORD=$(cat ../.influxdb/INFLUXDB_LOCAL_ADMIN_PASSWORD.txt)

# Helm chart versions
# you can update when you know what you are doing 
INFLUXDBCHART="4.10.2"             # see https://artifacthub.io/packages/helm/influxdata/influxdb
INGRESSNGINXCHART="4.0.13"         # see https://artifacthub.io/packages/helm/ingress-nginx/ingress-nginx
FLUENTBITCHART="0.19.10"           # see https://artifacthub.io/packages/helm/fluent/fluent-bit
KUBEPROMETHEUSSTACKCHART="23.3.2"  # see https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack
PROMOPERATOR="0.52.0"              # this is for Prometheus' CRDs. The version must fit to the chart version above. 

# Path to AMTOOL if available. Extract from https://github.com/prometheus/alertmanager/releases
# This is optional, you don't need to install it. 
export AMTOOL=~/bin/amtool


##########################################
# Other settings you don't need to touch #
##########################################

# app and version from package.json
export APP=`cat package.json | grep '^  \"name\":' | cut -d ' ' -f 4 | tr -d '",'`          # extract the application name
export VERSION=`cat package.json | grep '^  \"version\":' | cut -d ' ' -f 4 | tr -d '",'`   # extract the application version

# Local InfluxDB port config
export INFLUXUIPORT=31080   # Web UI for Influx DB, use http://localhost:${INFLUXUIPORT}
export INFLUXPORT=31081     # Access port for InfluxDB itself (the web UI uses this port)

# environment vars for envsubst
ENVSUBSTVAR='$HTTPPORT $CLUSTER $APP $GRAFANA_LOCAL_ADMIN_PASS $SLACKWEBHOOK $AMTOOL $AMTOOLCONFIG $VERSION $INFLUXPORT $INFLUXUIPORT $GRAFANA_CLOUD_METRICS_PUBLISHER_PASS $LOKI_METRICS_PUBLISHER_URL $LOKI_METRICS_PUBLISHER_USER $PROM_METRICS_PUBLISHER_URL $PROM_METRICS_PUBLISHER_USER $GRAFANACLOUDPROM $GRAFANACLOUDLOGS $SLACK_OR_NULL'

# amtool related settings
AMTOOLCONFIG=~/.config/amtool/config.yml
[ -x ${AMTOOL} ] && mkdir -p `dirname ${AMTOOLCONFIG}` && cat amtool-config.yaml.template | envsubst > ${AMTOOLCONFIG}

# Grafana Cloud data sources constructed from the organization name 
export GRAFANACLOUDPROM="grafanacloud-${GRAFANA_CLOUD_ORG}-prom"
export GRAFANACLOUDLOGS="grafanacloud-${GRAFANA_CLOUD_ORG}-logs"


##########
# CHECKS #
##########
if [ "${SLACK_ENABLE}" == "yes" ]; then
  [ -z ${SLACKWEBHOOK} ] && echo "$0: missing SLACKWEBHOOK definition" && exit 1
fi

if [ "${GRAFANA_CLOUD_ENABLE}" == "yes" ]; then
  [ -z ${INFLUXDB_LOCAL_ADMIN_PASSWORD} ] && echo "$0: missing INFLUXDB_ADMIN_PASSWORD definition" && exit 1
  [ -z ${GRAFANA_LOCAL_ADMIN_PASS} ] && echo "$0: missing GRAFANA_LOCAL_ADMIN_PASS definition" && exit 1
  [ -z ${GRAFANA_CLOUD_ORG} ] && echo "$0: missing GRAFANA_CLOUD_ORG definition" && exit 1
  [ -z ${GRAFANA_CLOUD_METRICS_PUBLISHER_PASS} ] && echo "$0: missing GRAFANA_CLOUD_METRICS_PUBLISHER_PASS definition" && exit 1
  [ -z ${LOKI_METRICS_PUBLISHER_USER} ] && echo "$0: missing LOKI_METRICS_PUBLISHER_USER definition" && exit 1
  [ -z ${PROM_METRICS_PUBLISHER_USER} ] && echo "$0: missing PROM_METRICS_PUBLISHER_USER definition" && exit 1
  [ -z ${LOKI_METRICS_PUBLISHER_URL} ] && echo "$0: missing LOKI_METRICS_PUBLISHER_URL definition" && exit 1
  [ -z ${PROM_METRICS_PUBLISHER_URL} ] && echo "$0: missing PROM_METRICS_PUBLISHER_URL definition" && exit 1
fi

[ -z ${APP} ] && echo "$0: missing APP definition" && exit 1
[ -z ${VERSION} ] && echo "$0: missing VERSION definition" && exit 1
[ -z ${INFLUXDBCHART} ] && echo "$0: missing INFLUXDBCHART definition" && exit 1
[ -z ${INGRESSNGINXCHART} ] && echo "$0: missing INGRESSNGINXCHART definition" && exit 1
[ -z ${FLUENTBITCHART} ] && echo "$0: missing FLUENTBITCHART definition" && exit 1
[ -z ${KUBEPROMETHEUSSTACKCHART} ] && echo "$0: missing KUBEPROMETHEUSSTACKCHART definition" && exit 1
[ -z ${PROMOPERATOR} ] && echo "$0: missing PROMOPERATOR definition" && exit 1
[ -z ${HTTPPORT} ] && echo "$0: missing HTTPPORT definition" && exit 1
[ -z ${CLUSTER} ] && echo "$0: missing CLUSTER definition" && exit 1
[ -z ${INFLUXUIPORT} ] && echo "$0: missing INFLUXUIPORT definition" && exit 1
[ -z ${INFLUXPORT} ] && echo "$0: missing INFLUXPORT definition" && exit 1

if [[ "`which npx`" == "" ]]; then
  echo "error...: no npx... nodejs not installed? "
  exit 1
fi
